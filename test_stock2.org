#+TITLE: Problem 2 Remaining Functions in stock_funcs.c
#+TESTY: PREFIX="prob2"
#+TESTY: USE_VALGRIND=1

* stock_set_hilo1
#+TESTY: program='./test_stock_funcs stock_set_hilo1'
#+BEGIN_SRC sh
{
    // Checks if stock_set_hilo() correctly sets the lo_index and
    // hi_index fields in a small prices array
    double prices[5] = {
      168.00, 16.03, 14.11, 50.00, 96.89,
    };
    stock_t stock = {
      .data_file = "5prices.txt",
      .count = 5,
      .prices = prices,
      .lo_index =  -1,
      .hi_index =  -1,
      .best_buy  = -1,
      .best_sell = -1,
    };
    stock_set_hilo(&stock);

    stock_print(&stock);
}
==STOCK DATA==
data_file: 5prices.txt
count: 5
prices: [168.00, 16.03, 14.11, ...]
lo_index:  2
hi_index:  0
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

* stock_set_hilo2
#+TESTY: program='./test_stock_funcs stock_set_hilo2'
#+BEGIN_SRC sh
{
    // Checks if stock_set_hilo() correctly sets the lo_index and
    // hi_index fields in a larger prices array
    double prices[10] = {
      125.72, 190.04, 45.25, 32.37, 40.99, 
      168.00, 16.03, 14.11, 50.00, 96.89,
    };
    stock_t *stock = stock_new();

    stock->data_file = strdup("bouncy-prices.txt");
    stock->count = 10;
    stock->prices = malloc(sizeof(double)*10);
    memcpy(stock->prices, prices, sizeof(double)*10);
    stock->lo_index =  -1;
    stock->hi_index =  -1;
    stock->best_buy  = -1;
    stock->best_sell = -1;

    stock_set_hilo(stock);
    stock_print(stock);

    stock_free(stock);
}
==STOCK DATA==
data_file: bouncy-prices.txt
count: 10
prices: [125.72, 190.04, 45.25, ...]
lo_index:  7
hi_index:  1
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

* stock_set_hilo3
#+TESTY: program='./test_stock_funcs stock_set_hilo3'
#+BEGIN_SRC sh
{
    // Checks behavior of stock_set_hilo() in length 0 and length 1
    // arrays
    double prices0[0] = {};
    stock_t stock0 = {
      .data_file = "0prices.txt",
      .count = 0,
      .prices = prices0,
      .lo_index =  -1,
      .hi_index =  -1,
      .best_buy  = -1,
      .best_sell = -1,
    };
    stock_set_hilo(&stock0);
    stock_print(&stock0);

    double prices1[1] = {123.45};
    stock_t stock1 = {
      .data_file = "1prices.txt",
      .count = 1,
      .prices = prices1,
      .lo_index =  -1,
      .hi_index =  -1,
      .best_buy  = -1,
      .best_sell = -1,
    };
    stock_set_hilo(&stock1);
    stock_print(&stock1);
}
==STOCK DATA==
data_file: 0prices.txt
count: 0
prices: []
lo_index:  -1
hi_index:  -1
best_buy:  -1
best_sell: -1
profit:    0.00
==STOCK DATA==
data_file: 1prices.txt
count: 1
prices: [123.45]
lo_index:  0
hi_index:  0
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

* stock_set_best1
#+TESTY: program='./test_stock_funcs stock_set_best1'
#+BEGIN_SRC sh
{
    // Checks for correct setting of best buy/sell point which aligns
    // with the stock min/max prices in this test
    double prices[9] = {
      45.0, 35.0, 25.0, 15.0, 5.0,
      10.0, 20.0, 30.0, 7.0,
    };
    stock_t stock = {
      .data_file = "prices.txt",
      .count = 9,
      .prices = prices,
      .lo_index =  -1,
      .hi_index =  -1,
      .best_buy  = -1,
      .best_sell = -1,
    };
    int ret = stock_set_best(&stock);
    stock_set_hilo(&stock);
    printf("ret: %d\n", ret);
    stock_print(&stock);
}
ret: 0
==STOCK DATA==
data_file: prices.txt
count: 9
prices: [45.00, 35.00, 25.00, ...]
lo_index:  4
hi_index:  0
best_buy:  4
best_sell: 7
profit:    25.00
{
    // Checks for correct setting of best buy/sell point; in this case
    // the best buy does not match the minimum price but the best sell
    // point does match the maximum
    double prices[10] = {
      30.0, 20.0, 30.0, 40.0, 50.0,
      45.0, 35.0, 25.0, 15.0, 5.0,
    };
    stock_t stock = {
      .data_file = "prices.txt",
      .count = 10,
      .prices = prices,
      .lo_index =  -1,
      .hi_index =  -1,
      .best_buy  = -1,
      .best_sell = -1,
    };
    int ret = stock_set_best(&stock);
    stock_set_hilo(&stock);
    printf("ret: %d\n", ret);
    stock_print(&stock);
}
ret: 0
==STOCK DATA==
data_file: prices.txt
count: 10
prices: [30.00, 20.00, 30.00, ...]
lo_index:  9
hi_index:  4
best_buy:  1
best_sell: 4
profit:    30.00
#+END_SRC

* stock_set_best2 and 3
#+TESTY: program='./test_stock_funcs stock_set_best2'
#+BEGIN_SRC sh
{
    // Checks for correct setting of best buy/sell point; in this case
    // the best buy does matches the minimum price but the best sell
    // point does not match the maximum
    double prices[13] = {
      50.0, 45.0, 25.0, 10.0, 12.0,
      15.0, 35.0, 34.0, 18.5, 16.5,
      15.5, 10.5,
    };
    stock_t stock = {
      .data_file = "prices.txt",
      .count = 13,
      .prices = prices,
      .lo_index =  -1,
      .hi_index =  -1,
      .best_buy  = -1,
      .best_sell = -1,
    };
    int ret = stock_set_best(&stock);
    stock_set_hilo(&stock);
    printf("ret: %d\n", ret);
    stock_print(&stock);
}
ret: 0
==STOCK DATA==
data_file: prices.txt
count: 13
prices: [50.00, 45.00, 25.00, ...]
lo_index:  12
hi_index:  0
best_buy:  3
best_sell: 6
profit:    25.00
#+END_SRC

#+TESTY: program='./test_stock_funcs stock_set_best2'
#+BEGIN_SRC sh
{
    // Checks for correct setting of best buy/sell point; in this case
    // the best buy does matches the minimum price but the best sell
    // point does not match the maximum
    double prices[13] = {
      50.0, 45.0, 25.0, 10.0, 12.0,
      15.0, 35.0, 34.0, 18.5, 16.5,
      15.5, 10.5,
    };
    stock_t stock = {
      .data_file = "prices.txt",
      .count = 13,
      .prices = prices,
      .lo_index =  -1,
      .hi_index =  -1,
      .best_buy  = -1,
      .best_sell = -1,
    };
    int ret = stock_set_best(&stock);
    stock_set_hilo(&stock);
    printf("ret: %d\n", ret);
    stock_print(&stock);
}
ret: 0
==STOCK DATA==
data_file: prices.txt
count: 13
prices: [50.00, 45.00, 25.00, ...]
lo_index:  12
hi_index:  0
best_buy:  3
best_sell: 6
profit:    25.00
#+END_SRC

* stock_set_best4
#+TESTY: program='./test_stock_funcs stock_set_best4'
#+BEGIN_SRC sh
{
    // Checks that when there is no profitable time to buy/sell
    // (profit of 0.0), then the best_buy / best_sell are set to -1
    // and the function returns -1
    double prices[8] = {
      50.0, 45.0, 30.0, 22.0, 18.0,
      15.0, 10.5, 8.5,
    };
    stock_t stock = {
      .data_file = "prices.txt",
      .count = 8,
      .prices = prices,
      .lo_index =  -1,
      .hi_index =  -1,
      .best_buy  = 0,
      .best_sell = 0,
    };
    int ret = stock_set_best(&stock);
    stock_set_hilo(&stock);
    printf("ret: %d\n", ret);
    stock_print(&stock);
}
ret: -1
==STOCK DATA==
data_file: prices.txt
count: 8
prices: [50.00, 45.00, 30.00, ...]
lo_index:  7
hi_index:  0
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

* count_lines
#+TESTY: program='./test_stock_funcs count_lines'
#+BEGIN_SRC sh
{
    // Checks several calls to count_lines() on different files in the
    // data/ directory.  This directory must be present with the
    // provided data files for the tests to work correctly.
    int ret = count_lines("data/stock-3only.txt");
    printf("ret: %d\n", ret);
}
ret: 3
{
    int ret = count_lines("data/stock-ascending.txt");
    printf("ret: %d\n", ret);
}
ret: 10
{
    int ret = count_lines("data/stock-FB-08-02-2021.txt");
    printf("ret: %d\n", ret);
}
ret: 543
{
    int ret = count_lines("data/stock-empty.txt");
    printf("ret: %d\n", ret);
}
ret: 0
{
    int ret = count_lines("data/not-there.txt");
    printf("ret: %d\n", ret);
}
Could not open file 'data/not-there.txt'
ret: -1
#+END_SRC

* stock_load1
#+TESTY: program='./test_stock_funcs stock_load1'
#+BEGIN_SRC sh
{
    // Checks stock_load() on a small data file to determine if it
    // correctly loads a small number of prices into an existing
    // stock.
    stock_t *stock = stock_new();
    int ret = stock_load(stock, "data/stock-3only.txt");
    printf("ret: %d\n", ret);
    stock_print(stock);
    stock_free(stock);
}
ret: 0
==STOCK DATA==
data_file: data/stock-3only.txt
count: 3
prices: [103.07, 45.26, 59.43]
lo_index:  -1
hi_index:  -1
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

* stock_load2 and 3
#+TESTY: program='./test_stock_funcs stock_load2'
#+BEGIN_SRC sh
{
    // Checks loading a stock file via stock_load() on a file in the
    // data/ directory.  This directory must be present with the
    // provided data files for the tests to work correctly.
    stock_t *stock = stock_new();
    int ret = stock_load(stock, "data/stock-jagged.txt");
    printf("ret: %d\n", ret);
    stock_print(stock);
    stock_free(stock);
}
ret: 0
==STOCK DATA==
data_file: data/stock-jagged.txt
count: 15
prices: [103.00, 250.00, 133.00, ...]
lo_index:  -1
hi_index:  -1
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

#+TESTY: program='./test_stock_funcs stock_load3'
#+BEGIN_SRC sh
{
    // Checks loading a stock file via stock_load() on a file in the
    // data/ directory.  This directory must be present with the
    // provided data files for the tests to work correctly.
    stock_t *stock = stock_new();
    int ret = stock_load(stock, "data/stock-GOOG-08-02-2021.txt");
    printf("ret: %d\n", ret);
    stock_print(stock);
    stock_free(stock);
}
ret: 0
==STOCK DATA==
data_file: data/stock-GOOG-08-02-2021.txt
count: 345
prices: [2715.00, 2715.00, 2711.00, ...]
lo_index:  -1
hi_index:  -1
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

* stock_load pathological
#+TESTY: program='./test_stock_funcs stock_load_1price'
#+BEGIN_SRC sh
{
    // stock_load() calls on price arrays of 1 
    stock_t *stock = stock_new();
    int ret = stock_load(stock, "data/stock-1only.txt");
    printf("ret: %d\n", ret);
    stock_print(stock);
    stock_free(stock);
}
ret: 0
==STOCK DATA==
data_file: data/stock-1only.txt
count: 1
prices: [70.00]
lo_index:  -1
hi_index:  -1
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

#+TESTY: program='./test_stock_funcs stock_load_empty'
#+BEGIN_SRC sh
{
    // Load a completely empty stock file - should give count of 0 and
    // an empty prices array.
    stock_t *stock = stock_new();
    int ret = stock_load(stock, "data/stock-empty.txt");
    printf("ret: %d\n", ret);
    stock_print(stock);
    stock_free(stock);
}
ret: 0
==STOCK DATA==
data_file: data/stock-empty.txt
count: 0
prices: []
lo_index:  -1
hi_index:  -1
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

#+TESTY: program='./test_stock_funcs stock_load_no_file'
#+BEGIN_SRC sh
{
    // Attempt to load a non-existent file which should fail and leave
    // the stock struct un-altered.
    stock_t *stock = stock_new();
    int ret = stock_load(stock, "data/not-there.txt");
    printf("ret: %d\n", ret);
    stock_print(stock);
    stock_free(stock);
}
Could not open file 'data/not-there.txt'
Unable to open stock file 'data/not-there.txt', bailing out
ret: -1
==STOCK DATA==
data_file: NULL
count: -1
prices: NULL
lo_index:  -1
hi_index:  -1
best_buy:  -1
best_sell: -1
profit:    0.00
#+END_SRC

* stock_plot1
#+TESTY: program='./test_stock_funcs stock_plot1'
#+BEGIN_SRC sh
{
    // Plots a stock with a small prices array that is NOT loaded from
    // a file with a couple different heights. Prices and max_height are
    // selected for an integer (non-fraction) plot step.
    double prices[6] = {5.0, 15.0, 0.0, 10.0, 25.0, 20.0};
    stock_t stock = {
      .data_file = "a-data-file.txt",
      .count = 6,
      .prices = prices,
      .lo_index  = 2,
      .hi_index  = 4,
      .best_buy  = -1,
      .best_sell = -1,
    };
    stock_plot(&stock, 5, 0, stock.count);
    printf("\n");
    stock_plot(&stock, 25, 0, stock.count);
}
==PLOT DATA==
start/stop:  0 6
max_height:  5
price range: 25.00
plot step:   5.00
           +------+
     20.00 |    H*|
     15.00 | *  H*|
     10.00 | * *H*|
      5.00 |** *H*|
      0.00 |**L*H*|
           +^----^+
            0    5    

==PLOT DATA==
start/stop:  0 6
max_height:  25
price range: 25.00
plot step:   1.00
           +------+
     24.00 |    H |
     23.00 |    H |
     22.00 |    H |
     21.00 |    H |
     20.00 |    H*|
     19.00 |    H*|
     18.00 |    H*|
     17.00 |    H*|
     16.00 |    H*|
     15.00 | *  H*|
     14.00 | *  H*|
     13.00 | *  H*|
     12.00 | *  H*|
     11.00 | *  H*|
     10.00 | * *H*|
      9.00 | * *H*|
      8.00 | * *H*|
      7.00 | * *H*|
      6.00 | * *H*|
      5.00 |** *H*|
      4.00 |** *H*|
      3.00 |** *H*|
      2.00 |** *H*|
      1.00 |** *H*|
      0.00 |**L*H*|
           +^----^+
            0    5    
#+END_SRC

* stock_plot2 3 4
** stock_plot2
#+TESTY: program='./test_stock_funcs stock_plot2'
#+BEGIN_SRC sh
{
    // Similar to previous test but this time with non-integer plot
    // step for vertical bars.
    double prices[5] = {5.0, 25.0, 10.0, 0.0, 15.0};
    stock_t stock = {
      .data_file = "b-data-file.txt",
      .count = 5,
      .prices = prices,
      .lo_index  = 3,
      .hi_index  = 1,
      .best_buy  = -1,
      .best_sell = -1,
    };
    stock_plot(&stock, 6, 0, stock.count);
    printf("\n");
    stock_plot(&stock, 12, 0, stock.count);
}
==PLOT DATA==
start/stop:  0 5
max_height:  6
price range: 25.00
plot step:   4.17
           +-----+
     20.83 | H   |
     16.67 | H   |
     12.50 | H  *|
      8.33 | H* *|
      4.17 |*H* *|
      0.00 |*H*L*|
           +^----+
            0    

==PLOT DATA==
start/stop:  0 5
max_height:  12
price range: 25.00
plot step:   2.08
           +-----+
     22.92 | H   |
     20.83 | H   |
     18.75 | H   |
     16.67 | H   |
     14.58 | H  *|
     12.50 | H  *|
     10.42 | H  *|
      8.33 | H* *|
      6.25 | H* *|
      4.17 |*H* *|
      2.08 |*H* *|
      0.00 |*H*L*|
           +^----+
            0    
#+END_SRC

** stock_plot3
#+TESTY: program='./test_stock_funcs stock_plot3'
#+BEGIN_SRC sh
{
    // Print full plot then print a slice from index 2 to 6. Checks if
    // the bottom axis and axis numbers are printed correctly. 
    double prices[7] = {5.0, 15.0, 0.0, 10.0, 25.0, 20.0, 17.0};
    stock_t stock = {
      .data_file = "c-data-file.txt",
      .count = 7,
      .prices = prices,
      .lo_index  = 2,
      .hi_index  = 4,
      .best_buy  = -1,
      .best_sell = -1,
    };
    stock_plot(&stock, 10, 0, stock.count);
    printf("\n");
    stock_plot(&stock, 10, 2, 6);
}
==PLOT DATA==
start/stop:  0 7
max_height:  10
price range: 25.00
plot step:   2.50
           +-------+
     22.50 |    H  |
     20.00 |    H* |
     17.50 |    H* |
     15.00 | *  H**|
     12.50 | *  H**|
     10.00 | * *H**|
      7.50 | * *H**|
      5.00 |** *H**|
      2.50 |** *H**|
      0.00 |**L*H**|
           +^----^-+
            0    5    

==PLOT DATA==
start/stop:  2 6
max_height:  10
price range: 25.00
plot step:   2.50
           +----+
     22.50 |  H |
     20.00 |  H*|
     17.50 |  H*|
     15.00 |  H*|
     12.50 |  H*|
     10.00 | *H*|
      7.50 | *H*|
      5.00 | *H*|
      2.50 | *H*|
      0.00 |L*H*|
           +---^+
               5    
#+END_SRC

** stock_plot4
#+TESTY: program='./test_stock_funcs stock_plot4'
#+BEGIN_SRC sh
{
    // Best Buy/Sell indices are set expect to see B and S characters
    // on the top axis corresponding to the these positions. Buy/Sell
    // positions do not correspond to Hi/Lo prices in this test.
    double prices[5] = {5.0, 25.0, 10.0, 0.0, 15.0};
    stock_t stock = {
      .data_file = "b-data-file.txt",
      .count = 5,
      .prices = prices,
      .lo_index  = 3,
      .hi_index  = 1,
      .best_buy  = 0,
      .best_sell = 1,
    };
    stock_plot(&stock, 10, 0, stock.count);
    printf("\n");
    stock_plot(&stock, 5, 0, stock.count);
}
==PLOT DATA==
start/stop:  0 5  
max_height:  10
price range: 25.00
plot step:   2.50
           +BS---+
     22.50 | H   |
     20.00 | H   |
     17.50 | H   |
     15.00 | H  *|
     12.50 | H  *|
     10.00 | H* *|
      7.50 | H* *|
      5.00 |*H* *|
      2.50 |*H* *|
      0.00 |*H*L*|
           +^----+
            0    

==PLOT DATA==
start/stop:  0 5  
max_height:  5
price range: 25.00
plot step:   5.00
           +BS---+
     20.00 | H   |
     15.00 | H  *|
     10.00 | H* *|
      5.00 |*H* *|
      0.00 |*H*L*|
           +^----+
            0    
#+END_SRC


* stock_plot5 6
** stock_plot5
#+TESTY: program='./test_stock_funcs stock_plot5'
#+BEGIN_SRC sh
{
    // Loads a stock from a file and checks if they are printed
    // correctly. Buy/Sell indices are separated so on the top axis
    // should see a B====S corresponding to the range the stock is
    // purchased. Buy/Sell correspond to Lo/Hi prices. Prints whole
    // plot and then a slice of the plot.
    stock_t *stock = stock_new();
    int ret = stock_load(stock,"data/stock-valley.txt");
    printf("ret: %d\n",ret);
    stock_set_hilo(stock);
    stock_set_best(stock);
    stock_print(stock);
    stock_plot(stock, 10, 0, stock->count);
    printf("\n");
    stock_plot(stock, 7, 3, stock->count-3);
    stock_free(stock);
}
ret: 0
==STOCK DATA==
data_file: data/stock-valley.txt
count: 12
prices: [100.00, 90.00, 80.00, ...]
lo_index:  5
hi_index:  11
best_buy:  5
best_sell: 11
profit:    55.00
==PLOT DATA==
start/stop:  0 12
max_height:  10
price range: 55.00
plot step:   5.50
           +-----B=====S+
     99.50 |*          H|
     94.00 |*         *H|
     88.50 |**        *H|
     83.00 |**       **H|
     77.50 |***      **H|
     72.00 |***     ***H|
     66.50 |****    ***H|
     61.00 |****   ****H|
     55.50 |*****  ****H|
     50.00 |*****L*****H|
           +^----^----^-+
            0    5    10   

==PLOT DATA==
start/stop:  3 9
max_height:  7
price range: 55.00
plot step:   7.86
           +--B===+
     97.14 |      |
     89.29 |      |
     81.43 |      |
     73.57 |     *|
     65.71 |*    *|
     57.86 |**  **|
     50.00 |**L***|
           +--^---+
              5    
#+END_SRC

** stock_plot6
#+TESTY: program='./test_stock_funcs stock_plot6'
#+BEGIN_SRC sh
{
    // Loads a stock from a file and checks if they are printed
    // correctly. Buy/Sell indices are separated so on the top axis
    // should see a B====S corresponding to the range the stock is
    // purchased. Buy/Sell does NOT correspond to Lo/Hi prices. Prints
    // whole plot and then a slice of the plot.
    stock_t *stock = stock_new();
    int ret = stock_load(stock,"data/stock-min-after-max.txt");
    printf("ret: %d\n",ret);
    stock_set_hilo(stock);
    stock_set_best(stock);
    stock_print(stock);
    stock_plot(stock, 10, 0, stock->count);
    printf("\n");
    stock_plot(stock, 12, 3, stock->count-2);
    stock_free(stock);
}
ret: 0
==STOCK DATA==
data_file: data/stock-min-after-max.txt
count: 15
prices: [223.00, 292.00, 27.00, ...]
lo_index:  10
hi_index:  4
best_buy:  2
best_sell: 4
profit:    296.00
==PLOT DATA==
start/stop:  0 15
max_height:  10
price range: 309.00
plot step:   30.90
           +--B=S----------+
    292.10 |    H   *      |
    261.20 | *  H   *      |
    230.30 | *  H   *      |
    199.40 |**  H * *      |
    168.50 |**  H** *  *  *|
    137.60 |**  H****  ****|
    106.70 |**  H****  ****|
     75.80 |** *H***** ****|
     44.90 |** *H***** ****|
     14.00 |****H*****L****|
           +^----^----^----+
            0    5    10   

==PLOT DATA==
start/stop:  3 13
max_height:  12
price range: 309.00
plot step:   25.75
           +=S--------+
    297.25 | H   *    |
    271.50 | H   *    |
    245.75 | H   *    |
    220.00 | H   *    |
    194.25 | H * *    |
    168.50 | H** *  * |
    142.75 | H** *  **|
    117.00 | H****  **|
     91.25 |*H****  **|
     65.50 |*H***** **|
     39.75 |*H***** **|
     14.00 |*H*****L**|
           +--^----^--+
              5    10   
#+END_SRC


* stock_main1

** data/stock-ascending.txt all
Runs the provided ~stock_main~ program on a the file
data/stock-ascending.txt to see if the correct command line output is
produced.

#+TESTY: program='./stock_main data/stock-ascending.txt 15'
#+BEGIN_SRC sh
==STOCK DATA==
data_file: data/stock-ascending.txt
count: 10
prices: [10.00, 20.00, 30.00, ...]
lo_index:  0
hi_index:  9
best_buy:  0
best_sell: 9
profit:    90.00
==PLOT DATA==
start/stop:  0 10
max_height:  15
price range: 90.00
plot step:   6.00
           +B========S+
     94.00 |         H|
     88.00 |        *H|
     82.00 |        *H|
     76.00 |       **H|
     70.00 |      ***H|
     64.00 |      ***H|
     58.00 |     ****H|
     52.00 |     ****H|
     46.00 |    *****H|
     40.00 |   ******H|
     34.00 |   ******H|
     28.00 |  *******H|
     22.00 |  *******H|
     16.00 | ********H|
     10.00 |L********H|
           +^----^----+
            0    5    
#+END_SRC

** data/stock-ascending.txt 5 to 10
Runs the provided ~stock_main~ program on a the file
data/stock-ascending.txt to see if the correct command line output is
produced; limits output to indices 5 and up.

#+TESTY: program='./stock_main data/stock-ascending.txt 15 5 10'
#+BEGIN_SRC sh
==STOCK DATA==
data_file: data/stock-ascending.txt
count: 10
prices: [10.00, 20.00, 30.00, ...]
lo_index:  0
hi_index:  9
best_buy:  0
best_sell: 9
profit:    90.00
==PLOT DATA==
start/stop:  5 10
max_height:  15
price range: 90.00
plot step:   6.00
           +====S+
     94.00 |    H|
     88.00 |   *H|
     82.00 |   *H|
     76.00 |  **H|
     70.00 | ***H|
     64.00 | ***H|
     58.00 |****H|
     52.00 |****H|
     46.00 |****H|
     40.00 |****H|
     34.00 |****H|
     28.00 |****H|
     22.00 |****H|
     16.00 |****H|
     10.00 |****H|
           +^----+
            5    
#+END_SRC


** data/stock-min-after-max.txt
Runs the provided ~stock_main~ program on a the file
data/stock-min-after-max.txt to see if the correct command line output
is produced.

#+TESTY: program='./stock_main data/stock-min-after-max.txt 14'
#+BEGIN_SRC sh
==STOCK DATA==
data_file: data/stock-min-after-max.txt
count: 15
prices: [223.00, 292.00, 27.00, ...]
lo_index:  10
hi_index:  4
best_buy:  2
best_sell: 4
profit:    296.00
==PLOT DATA==
start/stop:  0 15
max_height:  14
price range: 309.00
plot step:   22.07
           +--B=S----------+
    300.93 |    H   *      |
    278.86 | *  H   *      |
    256.79 | *  H   *      |
    234.71 | *  H   *      |
    212.64 |**  H   *      |
    190.57 |**  H * *      |
    168.50 |**  H** *  *  *|
    146.43 |**  H** *  ****|
    124.36 |**  H****  ****|
    102.29 |**  H****  ****|
     80.21 |** *H***** ****|
     58.14 |** *H***** ****|
     36.07 |** *H***** ****|
     14.00 |****H*****L****|
           +^----^----^----+
            0    5    10   
#+END_SRC

* stock_main2
** Facebook Stock 100 to 140
Runs on a stock_main on a larger Facebook stock file. Prints indices
10 to 23 only which includes the high price.

#+TESTY: program='./stock_main data/stock-FB-08-02-2021.txt 15 5 43'
#+BEGIN_SRC sh
==STOCK DATA==
data_file: data/stock-FB-08-02-2021.txt
count: 543
prices: [358.94, 358.50, 358.50, ...]
lo_index:  470
hi_index:  15
best_buy:  109
best_sell: 129
profit:    2.38
==PLOT DATA==
start/stop:  5 43
max_height:  15
price range: 8.00
plot step:   0.53
           +--------------------------------------+
    358.46 |**********H***          *             |
    357.92 |**********H***************************|
    357.39 |**********H***************************|
    356.86 |**********H***************************|
    356.32 |**********H***************************|
    355.79 |**********H***************************|
    355.25 |**********H***************************|
    354.72 |**********H***************************|
    354.19 |**********H***************************|
    353.65 |**********H***************************|
    353.12 |**********H***************************|
    352.59 |**********H***************************|
    352.05 |**********H***************************|
    351.52 |**********H***************************|
    350.99 |**********H***************************|
           +^----^----^----^----^----^----^----^--+
            5    10   15   20   25   30   35   40   
#+END_SRC

** Facebook Stock 100 to 140
Runs on a stock_main on a larger Facebook stock file. Prints
indices 100 to 140 which includes to best buy/sell time. Note the best
buy/sell are completely different from the min/max prices here: a bad
day for Marky Z.

#+TESTY: program='./stock_main data/stock-FB-08-02-2021.txt 22 100 140'
#+BEGIN_SRC sh
==STOCK DATA==
data_file: data/stock-FB-08-02-2021.txt
count: 543
prices: [358.94, 358.50, 358.50, ...]
lo_index:  470
hi_index:  15
best_buy:  109
best_sell: 129
profit:    2.38
==PLOT DATA==
start/stop:  100 140
max_height:  22
price range: 8.00
plot step:   0.36
           +---------B===================S----------+
    358.63 |                                        |
    358.26 |                                        |
    357.90 |                                        |
    357.53 |                                        |
    357.17 |                                        |
    356.81 |                                        |
    356.44 |                                        |
    356.08 |                                        |
    355.72 |                                        |
    355.35 |*                                       |
    354.99 |****                         *          |
    354.62 |*****                     ******** * ** |
    354.26 |*****          *****      **************|
    353.90 |*******    *** ********  ***************|
    353.53 |********   *****************************|
    353.17 |********  ******************************|
    352.80 |********* ******************************|
    352.44 |****************************************|
    352.08 |****************************************|
    351.71 |****************************************|
    351.35 |****************************************|
    350.99 |****************************************|
           +^----^----^----^----^----^----^----^----+
            100  105  110  115  120  125  130  135  
#+END_SRC

** Facebook Stock 152 to 203
Runs on a stock_main on a larger Facebook stock file. The range is
slightly odd: 152 to 203 to check that the bottom index printing looks
correct. 

#+TESTY: program='./stock_main data/stock-FB-08-02-2021.txt 20 152 203'
#+BEGIN_SRC sh
==STOCK DATA==
data_file: data/stock-FB-08-02-2021.txt
count: 543
prices: [358.94, 358.50, 358.50, ...]
lo_index:  470
hi_index:  15
best_buy:  109
best_sell: 129
profit:    2.38
==PLOT DATA==
start/stop:  152 203
max_height:  20
price range: 8.00
plot step:   0.40
           +---------------------------------------------------+
    358.59 |                                                   |
    358.19 |                                                   |
    357.79 |                                                   |
    357.39 |                                                   |
    356.99 |                                                   |
    356.59 |                                                   |
    356.19 |                                                   |
    355.79 |                                                   |
    355.39 |                                                   |
    354.99 |                                                   |
    354.59 |                                                   |
    354.19 |                              *  * **             *|
    353.79 |                       ***********************   **|
    353.39 |*      **          * ******************************|
    352.99 |**** ***** ** *************************************|
    352.59 |***************************************************|
    352.19 |***************************************************|
    351.79 |***************************************************|
    351.39 |***************************************************|
    350.99 |***************************************************|
           +---^----^----^----^----^----^----^----^----^----^--+
               155  160  165  170  175  180  185  190  195  200  
#+END_SRC

** Google Stock
Runs stock_main a large-ish Google stock price file. The whole range
is printed making this a very wide plot. Buy/Sell times correspond to
Lo/Hi prices.

#+TESTY: program='./stock_main data/stock-GOOG-08-02-2021.txt 30'
#+BEGIN_SRC sh
==STOCK DATA==
data_file: data/stock-GOOG-08-02-2021.txt
count: 345
prices: [2715.00, 2715.00, 2711.00, ...]
lo_index:  24
hi_index:  337
best_buy:  24
best_sell: 337
profit:    25.75
==PLOT DATA==
start/stop:  0 345
max_height:  30
price range: 25.75
plot step:   0.86
           +------------------------B========================================================================================================================================================================================================================================================================================================================S-------+
   2718.93 |                                                                                                                                                                                                                                                                                                                                               **H*******|
   2718.07 |                                                                                                                     *                                                                                                                                                                                                                         **H*******|
   2717.22 |                                                                                                                     **         **   *                                                                                                                                                                                                         **H*******|
   2716.36 |                                                                                                                    ****  ** *  ********                                                                                                                                                                                                      ***H*******|
   2715.50 |                                                                                                              *  *************************                                                                                                                                                                                                   ****H*******|
   2714.64 |**                                                                                                ***  * ***  ** **************************                                                                                                                                                                                                  ****H*******|
   2713.78 |**                                                                                               ****  *************************************                                                                                                                                    **                        *                                 *****H*******|
   2712.92 |**                                                                                              ***********************************************                                                                                                                               **** ********   ***      *****                                *****H*******|
   2712.07 |**                                                                                            * ***********************************************                                                                                                                          *  ***************** ****** ********                  *      * *   *****H*******|
   2711.21 |**        *                                                                                  ***************************************************                                                                                                                         ** **********************************      **        **     ** *   *****H*******|
   2710.35 |*** ** *  *                                                                                 ****************************************************                                                                                                                        **************************************** ********** * ****  *** **  *****H*******|
   2709.49 |****** *  ****                                     *                                        ****************************************************                                                               *                                                     ********************************************************************** *****H*******|
   2708.63 |********* ****                                   * **                                       ****************************************************               * *         *     *                           ***   *                                   *         * ******************************************************************************H*******|
   2707.77 |**************                                   *****                                    *******************************************************            *** *        **   *********                   *****   *                                  *******   *********************************************************************************H*******|
   2706.91 |**************                                  ******  * *           *                 * ********************************************************          ******  *     ***************             * *********  ***                               ********************************************************************************************H*******|
   2706.06 |**************                                  ******* ***   *       *                 ***********************************************************    *    ******* ***   *****************           ************ ***                              *********************************************************************************************H*******|
   2705.20 |**************                                  ************ **  **   *                 ***********************************************************   **    ******* ***  ****************** ** * *    *******************      **                 * *********************************************************************************************H*******|
   2704.34 |***************                                ************* *******  ***          *  ************************************************************** *** * ****************************************** ******************** *******               ************************************************************************************************H*******|
   2703.48 |*************** *                           ** ***************************         **************************************************************************************************************************************************   * * *** *************************************************************************************************H*******|
   2702.62 |*****************                           ******************************     * * **************************************************************************************************************************************************  **********************************************************************************************************H*******|
   2701.76 |*****************                   *      ********************************  ********************************************************************************************************************************************************************************************************************************************************************H*******|
   2700.91 |******************               * **      ******************************************************************************************************************************************************************************************************************************************************************************************************H*******|
   2700.05 |******************         *     ******   *******************************************************************************************************************************************************************************************************************************************************************************************************H*******|
   2699.19 |******************         *     ******   *******************************************************************************************************************************************************************************************************************************************************************************************************H*******|
   2698.33 |******************     *   ************  ********************************************************************************************************************************************************************************************************************************************************************************************************H*******|
   2697.47 |****************** *** *   ************  ********************************************************************************************************************************************************************************************************************************************************************************************************H*******|
   2696.61 |************************   ************ *********************************************************************************************************************************************************************************************************************************************************************************************************H*******|
   2695.76 |************************   **********************************************************************************************************************************************************************************************************************************************************************************************************************H*******|
   2694.90 |************************  ***********************************************************************************************************************************************************************************************************************************************************************************************************************H*******|
   2694.04 |************************L************************************************************************************************************************************************************************************************************************************************************************************************************************H*******|
           +^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----^----+
            0    5    10   15   20   25   30   35   40   45   50   55   60   65   70   75   80   85   90   95   100  105  110  115  120  125  130  135  140  145  150  155  160  165  170  175  180  185  190  195  200  205  210  215  220  225  230  235  240  245  250  255  260  265  270  275  280  285  290  295  300  305  310  315  320  325  330  335  340  
#+END_SRC
